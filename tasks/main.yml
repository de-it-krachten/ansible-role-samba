---

- name: Load variables based on OS type
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "family-{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "family-{{ ansible_os_family }}.yml"
        - default.yml
      paths:
        - vars

- name: Install samba packages
  ansible.builtin.package:
    name: "{{ samba_packages }}"
    state: present

- name: Create samba configuration file from template
  ansible.builtin.template:
    src: "{{ samba_conf }}"
    dest: /etc/samba/smb.conf
    mode: '0644'
  notify: Restart samba

- name: Start samba services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ samba_services }}"

- name: Copy dfree script
  ansible.builtin.copy:
    src: dfree
    dest: "{{ samba_dfree_script }}"
    owner: root
    group: root
    mode: '0755'

- name: Distribute custom samba scripts from non-template
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0755'
  loop: "{{ samba_scripts }}"
  when: item.src is not search('\.j2$')

- name: Distribute custom samba scripts from template
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0755'
  loop: "{{ samba_scripts }}"
  when: item.src is search('\.j2$')

- name: Ensure that the samba users exists
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: present
  loop: "{{ samba_users }}"
  loop_control:
    label: "{{ item.name }}"
  when: samba_create_users|bool

- name: List all samba users
  ansible.builtin.command: pdbedit -L
  changed_when: false
  check_mode: false
  register: _samba_users

- name: Create all samba users that do not exist
  ansible.builtin.shell: |
    set -o pipefail
    echo -e "{{ item.password }}\n{{ item.password }}\n" | \
    smbpasswd -s -a {{ item.name }}
  args:
    executable: /bin/bash
  register: smbpasswd
  when:
    - item.password is defined
    - _samba_users.stdout is not search(item.name)
  loop: "{{ samba_users }}"
  loop_control:
    label: "{{ item.name }}"

- name: Manage samba firewall ports (netbios)
  ansible.builtin.include_role:
    name: firewall
  vars:
    firewall_ports: "{{ samba_firewall_ports_netbios }}"
  when:
    - samba_manage_firewall|bool
    - samba_netbios|bool

- name: Manage samba firewall ports (ActiveDirectory)
  ansible.builtin.include_role:
    name: firewall
  vars:
    firewall_ports: "{{ samba_firewall_ports_ad }}"
  when:
    - samba_manage_firewall|bool
    - samba_ad|bool
